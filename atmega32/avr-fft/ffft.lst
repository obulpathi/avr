   1               	# 1 "ffft.S"
   1               	;-----------------------------------------------------------------------------;
   0               	
   0               	
   2               	; Fixed-point FFT routines for megaAVRs                        (C)ChaN, 2005
   3               	;-----------------------------------------------------------------------------;
   4               	;
   5               	; void fft_input (const int16_t *array_src, complex_t *array_bfly);
   6               	; void fft_execute (complex_t *array_bfly);
   7               	; void fft_output (complex_t *array_bfly, uint16_t *array_dst);
   8               	;
   9               	;  <array_src>: Wave form to be processed.
  10               	;  <array_bfly>: Complex array for butterfly operations.
  11               	;  <array_dst>: Spectrum output buffer.
  12               	;
  13               	; These functions must be called in sequence to do a DFT in FFT algorithm.
  14               	; fft_input() fills the complex array with a wave form to prepare butterfly
  15               	; operations. A hamming window is applied at the same time.
  16               	; fft_execute() executes the butterfly operations.
  17               	; fft_output() re-orders the results, converts the complex spectrum into
  18               	; scalar spectrum and output it in linear scale.
  19               	;
  20               	; The number of points FFT_N is defined in "ffft.h" and the value can be 64,
  21               	; 128, 256 or 512.
  22               	;
  23               	;----------------------------------------------------------------------------;
  24               	; 16bit fixed-point FFT performance with a MegaAVR @16MHz (measured)
  25               	;
  26               	;  Points:   Input, Execute,  Output,    Total:  Throughput
  27               	;   64pts:   .17ms,   2.0ms,   1.2ms,    3.4ms:   19.0kpps
  28               	;  128pts:   .33ms,   4.6ms,   2.4ms,    7.3ms:   17.5kpps
  29               	;  256pts:   .66ms,  10.4ms,   4.9ms,   15.9ms:   16.1kpps
  30               	;  512pts:   1.3ms,  23.2ms,   9.7ms,   34.2ms:   14.9kpps
  31               	; 1024pts:   <undefined>
  32               	;----------------------------------------------------------------------------;
  33               	
  34               	
  38               	.list
  39               	
  40               	#if FFT_N == 512
  41               	#define FFT_B 9
  42               	#elif FFT_N == 256
  43               	#define FFT_B 8
  44               	#elif FFT_N == 128
  45               	#define FFT_B 7
  46               	#elif FFT_N == 64
  47               	#define FFT_B 6
  48               	#else
  49               	#error FFT_N must be 64,128,256 or 512.
  50               	#endif
  51               	
  52               	
  53               	;----------------------------------------------------------------------------;
  54               	; Constant Tables
  55               	
  56               	.global tbl_window
  57               	tbl_window:	; tbl_window[] = ... (This is a Hamming window)
  58               	#if FFT_N == 512
  59               		.dc.w	2621, 2622, 2625, 2631, 2639, 2649, 2662, 2676, 2693, 2713, 2734, 2758, 2784, 2812, 2843, 28
  60               		.dc.w	2910, 2948, 2987, 3029, 3073, 3119, 3167, 3217, 3270, 3325, 3382, 3441, 3502, 3565, 3631, 36
  61               		.dc.w	3768, 3840, 3914, 3990, 4068, 4148, 4230, 4314, 4401, 4489, 4579, 4671, 4765, 4861, 4959, 50
  62               		.dc.w	5161, 5265, 5370, 5478, 5587, 5698, 5811, 5926, 6042, 6160, 6280, 6402, 6525, 6651, 6777, 69
  63               		.dc.w	7036, 7167, 7300, 7435, 7571, 7709, 7849, 7989, 8132, 8275, 8420, 8567, 8715, 8864, 9015, 91
  64               		.dc.w	9320, 9474, 9630, 9787, 9945, 10104, 10264, 10426, 10588, 10752, 10917, 11082, 11249, 11417,
  65               		.dc.w	11926, 12097, 12269, 12442, 12616, 12790, 12966, 13142, 13318, 13496, 13674, 13852, 14031, 1
  66               		.dc.w	14753, 14935, 15117, 15299, 15482, 15665, 15849, 16032, 16216, 16400, 16585, 16769, 16954, 1
  67               		.dc.w	17694, 17879, 18064, 18248, 18433, 18618, 18802, 18987, 19171, 19355, 19539, 19722, 19905, 2
  68               		.dc.w	20634, 20815, 20996, 21176, 21356, 21535, 21714, 21892, 22069, 22246, 22422, 22597, 22772, 2
  69               		.dc.w	23462, 23632, 23802, 23970, 24138, 24305, 24471, 24635, 24799, 24962, 25123, 25283, 25443, 2
  70               		.dc.w	26068, 26221, 26373, 26523, 26673, 26820, 26967, 27112, 27256, 27398, 27539, 27678, 27816, 2
  71               		.dc.w	28352, 28482, 28610, 28737, 28862, 28985, 29107, 29227, 29345, 29462, 29576, 29689, 29800, 2
  72               		.dc.w	30226, 30328, 30428, 30526, 30622, 30716, 30808, 30899, 30987, 31073, 31157, 31239, 31319, 3
  73               		.dc.w	31619, 31689, 31756, 31822, 31885, 31947, 32006, 32063, 32117, 32170, 32220, 32269, 32315, 3
  74               		.dc.w	32477, 32512, 32545, 32575, 32603, 32629, 32653, 32675, 32694, 32711, 32726, 32738, 32748, 3
  75               		.dc.w	32766, 32765, 32762, 32756, 32748, 32738, 32726, 32711, 32694, 32675, 32653, 32629, 32603, 3
  76               		.dc.w	32477, 32440, 32400, 32359, 32315, 32269, 32221, 32170, 32117, 32063, 32006, 31947, 31885, 3
  77               		.dc.w	31619, 31547, 31473, 31397, 31319, 31239, 31157, 31073, 30987, 30899, 30808, 30716, 30622, 3
  78               		.dc.w	30226, 30123, 30017, 29910, 29800, 29689, 29576, 29462, 29345, 29227, 29107, 28985, 28862, 2
  79               		.dc.w	28352, 28220, 28087, 27952, 27816, 27678, 27539, 27398, 27256, 27112, 26967, 26820, 26673, 2
  80               		.dc.w	26068, 25913, 25758, 25601, 25443, 25283, 25123, 24962, 24799, 24635, 24471, 24305, 24138, 2
  81               		.dc.w	23462, 23291, 23118, 22945, 22772, 22597, 22422, 22246, 22069, 21892, 21714, 21535, 21356, 2
  82               		.dc.w	20634, 20453, 20271, 20088, 19905, 19722, 19539, 19355, 19171, 18987, 18803, 18618, 18433, 1
  83               		.dc.w	17694, 17509, 17324, 17139, 16954, 16769, 16585, 16401, 16216, 16032, 15849, 15665, 15482, 1
  84               		.dc.w	14753, 14572, 14391, 14211, 14031, 13852, 13674, 13496, 13318, 13142, 12966, 12790, 12616, 1
  85               		.dc.w	11926, 11755, 11586, 11417, 11249, 11083, 10917, 10752, 10588, 10426, 10264, 10104, 9945, 97
  86               		.dc.w	9320, 9167, 9015, 8864, 8715, 8567, 8420, 8275, 8132, 7989, 7849, 7709, 7571, 7435, 7300, 71
  87               		.dc.w	7036, 6906, 6777, 6651, 6526, 6402, 6280, 6160, 6042, 5926, 5811, 5698, 5587, 5478, 5370, 52
  88               		.dc.w	5161, 5059, 4959, 4861, 4765, 4671, 4579, 4489, 4401, 4314, 4230, 4148, 4068, 3990, 3914, 38
  89               		.dc.w	3768, 3699, 3631, 3565, 3502, 3441, 3382, 3325, 3270, 3217, 3167, 3119, 3073, 3029, 2987, 29
  90               		.dc.w	2910, 2876, 2843, 2812, 2784, 2758, 2734, 2713, 2693, 2676, 2662, 2649, 2639, 2631, 2625, 26
  91               	
  92               	#elif FFT_N == 256
  93 0000 3D0A 410A 		.dc.w	2621, 2625, 2639, 2662, 2693, 2734, 2784, 2843, 2910, 2987, 3073, 3167, 3270, 3382, 3502, 36
  93      4F0A 660A 
  93      850A AE0A 
  93      E00A 1B0B 
  93      5E0B AB0B 
  94 0020 B80E 4A0F 		.dc.w	3768, 3914, 4068, 4230, 4401, 4579, 4765, 4959, 5161, 5370, 5587, 5811, 6042, 6280, 6525, 67
  94      E40F 8610 
  94      3111 E311 
  94      9D12 5F13 
  94      2914 FA14 
  95 0040 7C1B 841C 		.dc.w	7036, 7300, 7571, 7849, 8132, 8420, 8715, 9015, 9320, 9630, 9945, 10264, 10588, 10917, 11249
  95      931D A91E 
  95      C41F E420 
  95      0B22 3723 
  95      6824 9E25 
  96 0060 962E ED2F 		.dc.w	11926, 12269, 12616, 12966, 13318, 13674, 14031, 14391, 14753, 15117, 15482, 15849, 16216, 1
  96      4831 A632 
  96      0634 6A35 
  96      CF36 3738 
  96      A139 0D3B 
  97 0080 1E45 9046 		.dc.w	17694, 18064, 18433, 18802, 19171, 19539, 19905, 20271, 20634, 20996, 21356, 21714, 22069, 2
  97      0148 7249 
  97      E34A 534C 
  97      C14D 2F4F 
  97      9A50 0452 
  98 00a0 A65B FA5C 		.dc.w	23462, 23802, 24138, 24471, 24799, 25123, 25443, 25758, 26068, 26373, 26673, 26967, 27256, 2
  98      4A5E 975F 
  98      DF60 2362 
  98      6363 9E64 
  98      D465 0567 
  99 00c0 C06E C26F 		.dc.w	28352, 28610, 28862, 29107, 29345, 29576, 29800, 30017, 30226, 30428, 30622, 30808, 30987, 3
  99      BE70 B371 
  99      A172 8873 
  99      6874 4175 
  99      1276 DC76 
 100 00e0 837B 0C7C 		.dc.w	31619, 31756, 31885, 32006, 32117, 32220, 32315, 32400, 32477, 32545, 32603, 32653, 32694, 3
 100      8D7C 067D 
 100      757D DC7D 
 100      3B7E 907E 
 100      DD7E 217F 
 101 0100 FE7F FA7F 		.dc.w	32766, 32762, 32748, 32726, 32694, 32653, 32603, 32545, 32477, 32400, 32315, 32221, 32117, 3
 101      EC7F D67F 
 101      B67F 8D7F 
 101      5B7F 217F 
 101      DD7E 907E 
 102 0120 837B F17A 		.dc.w	31619, 31473, 31319, 31157, 30987, 30808, 30622, 30428, 30226, 30017, 29800, 29576, 29345, 2
 102      577A B579 
 102      0B79 5878 
 102      9E77 DC76 
 102      1276 4175 
 103 0140 C06E B76D 		.dc.w	28352, 28087, 27816, 27539, 27256, 26967, 26673, 26373, 26068, 25758, 25443, 25123, 24799, 2
 103      A86C 936B 
 103      786A 5769 
 103      3168 0567 
 103      D465 9E64 
 104 0160 A65B 4E5A 		.dc.w	23462, 23118, 22772, 22422, 22069, 21714, 21356, 20996, 20634, 20271, 19905, 19539, 19171, 1
 104      F458 9657 
 104      3556 D254 
 104      6C53 0452 
 104      9A50 2F4F 
 105 0180 1E45 AC43 		.dc.w	17694, 17324, 16954, 16585, 16216, 15849, 15482, 15117, 14753, 14391, 14031, 13674, 13318, 1
 105      3A42 C940 
 105      583F E93D 
 105      7A3C 0D3B 
 105      A139 3738 
 106 01a0 962E 422D 		.dc.w	11926, 11586, 11249, 10917, 10588, 10264, 9945, 9630, 9320, 9015, 8715, 8420, 8132, 7849, 75
 106      F12B A52A 
 106      5C29 1828 
 106      D926 9E25 
 106      6824 3723 
 107 01c0 7C1B 791A 		.dc.w	7036, 6777, 6526, 6280, 6042, 5811, 5587, 5370, 5161, 4959, 4765, 4579, 4401, 4230, 4068, 39
 107      7E19 8818 
 107      9A17 B316 
 107      D315 FA14 
 107      2914 5F13 
 108 01e0 B80E 2F0E 		.dc.w	3768, 3631, 3502, 3382, 3270, 3167, 3073, 2987, 2910, 2843, 2784, 2734, 2693, 2662, 2639, 26
 108      AE0D 360D 
 108      C60C 5F0C 
 108      010C AB0B 
 108      5E0B 1B0B 
 109               	
 110               	#elif FFT_N == 128
 111               		.dc.w	2621, 2639, 2693, 2784, 2910, 3073, 3270, 3502, 3768, 4068, 4401, 4765, 5161, 5587, 6042, 65
 112               		.dc.w	7036, 7571, 8132, 8715, 9320, 9945, 10588, 11249, 11926, 12616, 13318, 14031, 14753, 15482, 
 113               		.dc.w	17694, 18433, 19171, 19905, 20634, 21356, 22069, 22772, 23462, 24138, 24799, 25443, 26068, 2
 114               		.dc.w	28352, 28862, 29345, 29800, 30226, 30622, 30987, 31319, 31619, 31885, 32117, 32315, 32477, 3
 115               		.dc.w	32766, 32748, 32694, 32603, 32477, 32315, 32117, 31885, 31619, 31319, 30987, 30622, 30226, 2
 116               		.dc.w	28352, 27816, 27256, 26673, 26068, 25443, 24799, 24138, 23462, 22772, 22069, 21356, 20634, 1
 117               		.dc.w	17694, 16954, 16216, 15482, 14753, 14031, 13318, 12616, 11926, 11249, 10588, 9945, 9320, 871
 118               		.dc.w	7036, 6526, 6042, 5587, 5161, 4765, 4401, 4068, 3768, 3502, 3270, 3073, 2910, 2784, 2693, 26
 119               	
 120               	#elif FFT_N == 64
 121               		.dc.w	2621, 2693, 2910, 3270, 3768, 4401, 5161, 6042, 7036, 8132, 9320, 10588, 11926, 13318, 14753
 122               		.dc.w	17694, 19171, 20634, 22069, 23462, 24799, 26068, 27256, 28352, 29345, 30226, 30987, 31619, 3
 123               		.dc.w	32766, 32694, 32477, 32117, 31619, 30987, 30226, 29345, 28352, 27256, 26068, 24799, 23462, 2
 124               		.dc.w	17694, 16216, 14753, 13318, 11926, 10588, 9320, 8132, 7036, 6042, 5161, 4401, 3768, 3270, 29
 125               	#endif
 126               	
 127               	
 128               	tbl_cos_sin:	; Table of {cos(x),sin(x)}, (0 <= x < pi, in FFT_N/2 steps)
 129               	#if FFT_N == 512
 130               		.dc.w	32767, 0, 32764, 402, 32757, 804, 32744, 1206, 32727, 1607, 32705, 2009, 32678, 2410, 32646,
 131               		.dc.w	32609, 3211, 32567, 3611, 32520, 4011, 32468, 4409, 32412, 4807, 32350, 5205, 32284, 5601, 3
 132               		.dc.w	32137, 6392, 32056, 6786, 31970, 7179, 31880, 7571, 31785, 7961, 31684, 8351, 31580, 8739, 3
 133               		.dc.w	31356, 9511, 31236, 9895, 31113, 10278, 30984, 10659, 30851, 11038, 30713, 11416, 30571, 117
 134               		.dc.w	30272, 12539, 30116, 12909, 29955, 13278, 29790, 13645, 29621, 14009, 29446, 14372, 29268, 1
 135               		.dc.w	28897, 15446, 28706, 15799, 28510, 16150, 28309, 16499, 28105, 16845, 27896, 17189, 27683, 1
 136               		.dc.w	27244, 18204, 27019, 18537, 26789, 18867, 26556, 19194, 26318, 19519, 26077, 19840, 25831, 2
 137               		.dc.w	25329, 20787, 25072, 21096, 24811, 21402, 24546, 21705, 24278, 22004, 24006, 22301, 23731, 2
 138               		.dc.w	23169, 23169, 22883, 23452, 22594, 23731, 22301, 24006, 22004, 24278, 21705, 24546, 21402, 2
 139               		.dc.w	20787, 25329, 20474, 25582, 20159, 25831, 19840, 26077, 19519, 26318, 19194, 26556, 18867, 2
 140               		.dc.w	18204, 27244, 17868, 27466, 17530, 27683, 17189, 27896, 16845, 28105, 16499, 28309, 16150, 2
 141               		.dc.w	15446, 28897, 15090, 29085, 14732, 29268, 14372, 29446, 14009, 29621, 13645, 29790, 13278, 2
 142               		.dc.w	12539, 30272, 12166, 30424, 11792, 30571, 11416, 30713, 11038, 30851, 10659, 30984, 10278, 3
 143               		.dc.w	9511, 31356, 9126, 31470, 8739, 31580, 8351, 31684, 7961, 31785, 7571, 31880, 7179, 31970, 6
 144               		.dc.w	6392, 32137, 5997, 32213, 5601, 32284, 5205, 32350, 4807, 32412, 4409, 32468, 4011, 32520, 3
 145               		.dc.w	3211, 32609, 2811, 32646, 2410, 32678, 2009, 32705, 1607, 32727, 1206, 32744, 804, 32757, 40
 146               		.dc.w	0, 32766, -402, 32764, -804, 32757, -1206, 32744, -1607, 32727, -2009, 32705, -2410, 32678, 
 147               		.dc.w	-3211, 32609, -3611, 32567, -4010, 32520, -4409, 32468, -4807, 32412, -5205, 32350, -5601, 3
 148               		.dc.w	-6392, 32137, -6786, 32056, -7179, 31970, -7571, 31880, -7961, 31785, -8351, 31684, -8739, 3
 149               		.dc.w	-9511, 31356, -9895, 31236, -10278, 31113, -10659, 30984, -11038, 30851, -11416, 30713, -117
 150               		.dc.w	-12539, 30272, -12909, 30116, -13278, 29955, -13645, 29790, -14009, 29621, -14372, 29446, -1
 151               		.dc.w	-15446, 28897, -15799, 28706, -16150, 28510, -16499, 28309, -16845, 28105, -17189, 27896, -1
 152               		.dc.w	-18204, 27244, -18537, 27019, -18867, 26789, -19194, 26556, -19519, 26318, -19840, 26077, -2
 153               		.dc.w	-20787, 25329, -21096, 25072, -21402, 24811, -21705, 24546, -22004, 24278, -22301, 24006, -2
 154               		.dc.w	-23169, 23169, -23452, 22883, -23731, 22594, -24006, 22301, -24278, 22005, -24546, 21705, -2
 155               		.dc.w	-25329, 20787, -25582, 20474, -25831, 20159, -26077, 19840, -26318, 19519, -26556, 19194, -2
 156               		.dc.w	-27244, 18204, -27466, 17868, -27683, 17530, -27896, 17189, -28105, 16845, -28309, 16499, -2
 157               		.dc.w	-28897, 15446, -29085, 15090, -29268, 14732, -29446, 14372, -29620, 14009, -29790, 13645, -2
 158               		.dc.w	-30272, 12539, -30424, 12167, -30571, 11792, -30713, 11416, -30851, 11038, -30984, 10659, -3
 159               		.dc.w	-31356, 9511, -31470, 9126, -31580, 8739, -31684, 8351, -31784, 7961, -31880, 7571, -31970, 
 160               		.dc.w	-32137, 6392, -32213, 5997, -32284, 5601, -32350, 5205, -32412, 4807, -32468, 4409, -32520, 
 161               		.dc.w	-32609, 3211, -32646, 2811, -32678, 2410, -32705, 2009, -32727, 1607, -32744, 1206, -32757, 
 162               	
 163               	#elif FFT_N == 256
 164 0200 FF7F 0000 		.dc.w	32767, 0, 32757, 804, 32727, 1607, 32678, 2410, 32609, 3211, 32520, 4011, 32412, 4807, 32284
 164      F57F 2403 
 164      D77F 4706 
 164      A67F 6A09 
 164      617F 8B0C 
 165 0220 897D F818 		.dc.w	32137, 6392, 31970, 7179, 31785, 7961, 31580, 8739, 31356, 9511, 31113, 10278, 30851, 11038,
 165      E27C 0B1C 
 165      297C 191F 
 165      5C7B 2322 
 165      7C7A 2725 
 166 0240 4076 FB30 		.dc.w	30272, 12539, 29955, 13278, 29621, 14009, 29268, 14732, 28897, 15446, 28510, 16150, 28105, 1
 166      0375 DE33 
 166      B573 B936 
 166      5472 8C39 
 166      E170 563C 
 167 0260 6C6A 1C47 		.dc.w	27244, 18204, 26789, 18867, 26318, 19519, 25831, 20159, 25329, 20787, 24811, 21402, 24278, 2
 167      A568 B349 
 167      CE66 3F4C 
 167      E764 BF4E 
 167      F162 3351 
 168 0280 815A 815A 		.dc.w	23169, 23169, 22594, 23731, 22004, 24278, 21402, 24811, 20787, 25329, 20159, 25831, 19519, 2
 168      4258 B35C 
 168      F455 D65E 
 168      9A53 EB60 
 168      3351 F162 
 169 02a0 1C47 6C6A 		.dc.w	18204, 27244, 17530, 27683, 16845, 28105, 16150, 28510, 15446, 28897, 14732, 29268, 14009, 2
 169      7A44 236C 
 169      CD41 C96D 
 169      163F 5E6F 
 169      563C E170 
 170 02c0 FB30 4076 		.dc.w	12539, 30272, 11792, 30571, 11038, 30851, 10278, 31113, 9511, 31356, 8739, 31580, 7961, 3178
 170      102E 6B77 
 170      1E2B 8378 
 170      2628 8979 
 170      2725 7C7A 
 171 02e0 F818 897D 		.dc.w	6392, 32137, 5601, 32284, 4807, 32412, 4011, 32520, 3211, 32609, 2410, 32678, 1607, 32727, 8
 171      E115 1C7E 
 171      C712 9C7E 
 171      AB0F 087F 
 171      8B0C 617F 
 172 0300 0000 FE7F 		.dc.w	0, 32766, -804, 32757, -1607, 32727, -2410, 32678, -3211, 32609, -4010, 32520, -4807, 32412,
 172      DCFC F57F 
 172      B9F9 D77F 
 172      96F6 A67F 
 172      75F3 617F 
 173 0320 08E7 897D 		.dc.w	-6392, 32137, -7179, 31970, -7961, 31785, -8739, 31580, -9511, 31356, -10278, 31113, -11038,
 173      F5E3 E27C 
 173      E7E0 297C 
 173      DDDD 5C7B 
 173      D9DA 7C7A 
 174 0340 05CF 4076 		.dc.w	-12539, 30272, -13278, 29955, -14009, 29621, -14732, 29268, -15446, 28897, -16150, 28510, -1
 174      22CC 0375 
 174      47C9 B573 
 174      74C6 5472 
 174      AAC3 E170 
 175 0360 E4B8 6C6A 		.dc.w	-18204, 27244, -18867, 26789, -19519, 26318, -20159, 25831, -20787, 25329, -21402, 24811, -2
 175      4DB6 A568 
 175      C1B3 CE66 
 175      41B1 E764 
 175      CDAE F162 
 176 0380 7FA5 815A 		.dc.w	-23169, 23169, -23731, 22594, -24278, 22005, -24811, 21402, -25329, 20787, -25831, 20159, -2
 176      4DA3 4258 
 176      2AA1 F555 
 176      159F 9A53 
 176      0F9D 3351 
 177 03a0 9495 1C47 		.dc.w	-27244, 18204, -27683, 17530, -28105, 16845, -28510, 16150, -28897, 15446, -29268, 14732, -2
 177      DD93 7A44 
 177      3792 CD41 
 177      A290 163F 
 177      1F8F 563C 
 178 03c0 C089 FB30 		.dc.w	-30272, 12539, -30571, 11792, -30851, 11038, -31113, 10278, -31356, 9511, -31580, 8739, -317
 178      9588 102E 
 178      7D87 1E2B 
 178      7786 2628 
 178      8485 2725 
 179 03e0 7782 F818 		.dc.w	-32137, 6392, -32284, 5601, -32412, 4807, -32520, 4011, -32609, 3211, -32678, 2410, -32727, 
 179      E481 E115 
 179      6481 C712 
 179      F880 AB0F 
 179      9F80 8B0C 
 180               	
 181               	#elif FFT_N == 128
 182               		.dc.w	32767, 0, 32727, 1607, 32609, 3211, 32412, 4807, 32137, 6392, 31785, 7961, 31356, 9511, 3085
 183               		.dc.w	30272, 12539, 29621, 14009, 28897, 15446, 28105, 16845, 27244, 18204, 26318, 19519, 25329, 2
 184               		.dc.w	23169, 23169, 22004, 24278, 20787, 25329, 19519, 26318, 18204, 27244, 16845, 28105, 15446, 2
 185               		.dc.w	12539, 30272, 11038, 30851, 9511, 31356, 7961, 31785, 6392, 32137, 4807, 32412, 3211, 32609,
 186               		.dc.w	0, 32766, -1607, 32727, -3211, 32609, -4807, 32412, -6392, 32137, -7961, 31785, -9511, 31356
 187               		.dc.w	-12539, 30272, -14009, 29621, -15446, 28897, -16845, 28105, -18204, 27244, -19519, 26318, -2
 188               		.dc.w	-23169, 23169, -24278, 22005, -25329, 20787, -26318, 19519, -27244, 18204, -28105, 16845, -2
 189               		.dc.w	-30272, 12539, -30851, 11038, -31356, 9511, -31784, 7961, -32137, 6392, -32412, 4807, -32609
 190               	
 191               	#elif FFT_N == 64
 192               		.dc.w	32767, 0, 32609, 3211, 32137, 6392, 31356, 9511, 30272, 12539, 28897, 15446, 27244, 18204, 2
 193               		.dc.w	23169, 23169, 20787, 25329, 18204, 27244, 15446, 28897, 12539, 30272, 9511, 31356, 6392, 321
 194               		.dc.w	0, 32766, -3211, 32609, -6392, 32137, -9511, 31356, -12539, 30272, -15446, 28897, -18204, 27
 195               		.dc.w	-23169, 23169, -25329, 20787, -27244, 18204, -28897, 15446, -30272, 12539, -31356, 9511, -32
 196               	#endif
 197               	
 198               	
 199               	
 200               	tbl_bitrev:		; tbl_bitrev[] = ...
 201               	#if FFT_N == 512
 202               	#ifdef INPUT_IQ
 203               		.dc.w	1*4, 257*4, 129*4, 385*4, 65*4, 321*4, 193*4, 449*4, 33*4, 289*4, 161*4, 417*4, 97*4, 353*4,
 204               		.dc.w	17*4, 273*4, 145*4, 401*4, 81*4, 337*4, 209*4, 465*4, 49*4, 305*4, 177*4, 433*4, 113*4, 369*
 205               		.dc.w	9*4, 265*4, 137*4, 393*4, 73*4, 329*4, 201*4, 457*4, 41*4, 297*4, 169*4, 425*4, 105*4, 361*4
 206               		.dc.w	25*4, 281*4, 153*4, 409*4, 89*4, 345*4, 217*4, 473*4, 57*4, 313*4, 185*4, 441*4, 121*4, 377*
 207               		.dc.w	5*4, 261*4, 133*4, 389*4, 69*4, 325*4, 197*4, 453*4, 37*4, 293*4, 165*4, 421*4, 101*4, 357*4
 208               		.dc.w	21*4, 277*4, 149*4, 405*4, 85*4, 341*4, 213*4, 469*4, 53*4, 309*4, 181*4, 437*4, 117*4, 373*
 209               		.dc.w	13*4, 269*4, 141*4, 397*4, 77*4, 333*4, 205*4, 461*4, 45*4, 301*4, 173*4, 429*4, 109*4, 365*
 210               		.dc.w	29*4, 285*4, 157*4, 413*4, 93*4, 349*4, 221*4, 477*4, 61*4, 317*4, 189*4, 445*4, 125*4, 381*
 211               		.dc.w	3*4, 259*4, 131*4, 387*4, 67*4, 323*4, 195*4, 451*4, 35*4, 291*4, 163*4, 419*4, 99*4, 355*4,
 212               		.dc.w	19*4, 275*4, 147*4, 403*4, 83*4, 339*4, 211*4, 467*4, 51*4, 307*4, 179*4, 435*4, 115*4, 371*
 213               		.dc.w	11*4, 267*4, 139*4, 395*4, 75*4, 331*4, 203*4, 459*4, 43*4, 299*4, 171*4, 427*4, 107*4, 363*
 214               		.dc.w	27*4, 283*4, 155*4, 411*4, 91*4, 347*4, 219*4, 475*4, 59*4, 315*4, 187*4, 443*4, 123*4, 379*
 215               		.dc.w	7*4, 263*4, 135*4, 391*4, 71*4, 327*4, 199*4, 455*4, 39*4, 295*4, 167*4, 423*4, 103*4, 359*4
 216               		.dc.w	23*4, 279*4, 151*4, 407*4, 87*4, 343*4, 215*4, 471*4, 55*4, 311*4, 183*4, 439*4, 119*4, 375*
 217               		.dc.w	15*4, 271*4, 143*4, 399*4, 79*4, 335*4, 207*4, 463*4, 47*4, 303*4, 175*4, 431*4, 111*4, 367*
 218               		.dc.w	31*4, 287*4, 159*4, 415*4, 95*4, 351*4, 223*4, 479*4, 63*4, 319*4, 191*4, 447*4, 127*4, 383*
 219               	#endif
 220               		.dc.w	0*4, 256*4, 128*4, 384*4, 64*4, 320*4, 192*4, 448*4, 32*4, 288*4, 160*4, 416*4, 96*4, 352*4,
 221               		.dc.w	16*4, 272*4, 144*4, 400*4, 80*4, 336*4, 208*4, 464*4, 48*4, 304*4, 176*4, 432*4, 112*4, 368*
 222               		.dc.w	8*4, 264*4, 136*4, 392*4, 72*4, 328*4, 200*4, 456*4, 40*4, 296*4, 168*4, 424*4, 104*4, 360*4
 223               		.dc.w	24*4, 280*4, 152*4, 408*4, 88*4, 344*4, 216*4, 472*4, 56*4, 312*4, 184*4, 440*4, 120*4, 376*
 224               		.dc.w	4*4, 260*4, 132*4, 388*4, 68*4, 324*4, 196*4, 452*4, 36*4, 292*4, 164*4, 420*4, 100*4, 356*4
 225               		.dc.w	20*4, 276*4, 148*4, 404*4, 84*4, 340*4, 212*4, 468*4, 52*4, 308*4, 180*4, 436*4, 116*4, 372*
 226               		.dc.w	12*4, 268*4, 140*4, 396*4, 76*4, 332*4, 204*4, 460*4, 44*4, 300*4, 172*4, 428*4, 108*4, 364*
 227               		.dc.w	28*4, 284*4, 156*4, 412*4, 92*4, 348*4, 220*4, 476*4, 60*4, 316*4, 188*4, 444*4, 124*4, 380*
 228               		.dc.w	2*4, 258*4, 130*4, 386*4, 66*4, 322*4, 194*4, 450*4, 34*4, 290*4, 162*4, 418*4, 98*4, 354*4,
 229               		.dc.w	18*4, 274*4, 146*4, 402*4, 82*4, 338*4, 210*4, 466*4, 50*4, 306*4, 178*4, 434*4, 114*4, 370*
 230               		.dc.w	10*4, 266*4, 138*4, 394*4, 74*4, 330*4, 202*4, 458*4, 42*4, 298*4, 170*4, 426*4, 106*4, 362*
 231               		.dc.w	26*4, 282*4, 154*4, 410*4, 90*4, 346*4, 218*4, 474*4, 58*4, 314*4, 186*4, 442*4, 122*4, 378*
 232               		.dc.w	6*4, 262*4, 134*4, 390*4, 70*4, 326*4, 198*4, 454*4, 38*4, 294*4, 166*4, 422*4, 102*4, 358*4
 233               		.dc.w	22*4, 278*4, 150*4, 406*4, 86*4, 342*4, 214*4, 470*4, 54*4, 310*4, 182*4, 438*4, 118*4, 374*
 234               		.dc.w	14*4, 270*4, 142*4, 398*4, 78*4, 334*4, 206*4, 462*4, 46*4, 302*4, 174*4, 430*4, 110*4, 366*
 235               		.dc.w	30*4, 286*4, 158*4, 414*4, 94*4, 350*4, 222*4, 478*4, 62*4, 318*4, 190*4, 446*4, 126*4, 382*
 236               	
 237               	#elif FFT_N == 256
 238               	#ifdef INPUT_IQ
 239               		.dc.w	1*4, 129*4, 65*4, 193*4, 33*4, 161*4, 97*4, 225*4, 17*4, 145*4, 81*4, 209*4, 49*4, 177*4, 11
 240               		.dc.w	9*4, 137*4, 73*4, 201*4, 41*4, 169*4, 105*4, 233*4, 25*4, 153*4, 89*4, 217*4, 57*4, 185*4, 1
 241               		.dc.w	5*4, 133*4, 69*4, 197*4, 37*4, 165*4, 101*4, 229*4, 21*4, 149*4, 85*4, 213*4, 53*4, 181*4, 1
 242               		.dc.w	13*4, 141*4, 77*4, 205*4, 45*4, 173*4, 109*4, 237*4, 29*4, 157*4, 93*4, 221*4, 61*4, 189*4, 
 243               		.dc.w	3*4, 131*4, 67*4, 195*4, 35*4, 163*4, 99*4, 227*4, 19*4, 147*4, 83*4, 211*4, 51*4, 179*4, 11
 244               		.dc.w	11*4, 139*4, 75*4, 203*4, 43*4, 171*4, 107*4, 235*4, 27*4, 155*4, 91*4, 219*4, 59*4, 187*4, 
 245               		.dc.w	7*4, 135*4, 71*4, 199*4, 39*4, 167*4, 103*4, 231*4, 23*4, 151*4, 87*4, 215*4, 55*4, 183*4, 1
 246               		.dc.w	15*4, 143*4, 79*4, 207*4, 47*4, 175*4, 111*4, 239*4, 31*4, 159*4, 95*4, 223*4, 63*4, 191*4, 
 247               	#endif
 248 0400 0000 0002 		.dc.w	0*4, 128*4, 64*4, 192*4, 32*4, 160*4, 96*4, 224*4, 16*4, 144*4, 80*4, 208*4, 48*4, 176*4, 11
 248      0001 0003 
 248      8000 8002 
 248      8001 8003 
 248      4000 4002 
 249 0420 2000 2002 		.dc.w	8*4, 136*4, 72*4, 200*4, 40*4, 168*4, 104*4, 232*4, 24*4, 152*4, 88*4, 216*4, 56*4, 184*4, 1
 249      2001 2003 
 249      A000 A002 
 249      A001 A003 
 249      6000 6002 
 250 0440 1000 1002 		.dc.w	4*4, 132*4, 68*4, 196*4, 36*4, 164*4, 100*4, 228*4, 20*4, 148*4, 84*4, 212*4, 52*4, 180*4, 1
 250      1001 1003 
 250      9000 9002 
 250      9001 9003 
 250      5000 5002 
 251 0460 3000 3002 		.dc.w	12*4, 140*4, 76*4, 204*4, 44*4, 172*4, 108*4, 236*4, 28*4, 156*4, 92*4, 220*4, 60*4, 188*4, 
 251      3001 3003 
 251      B000 B002 
 251      B001 B003 
 251      7000 7002 
 252 0480 0800 0802 		.dc.w	2*4, 130*4, 66*4, 194*4, 34*4, 162*4, 98*4, 226*4, 18*4, 146*4, 82*4, 210*4, 50*4, 178*4, 11
 252      0801 0803 
 252      8800 8802 
 252      8801 8803 
 252      4800 4802 
 253 04a0 2800 2802 		.dc.w	10*4, 138*4, 74*4, 202*4, 42*4, 170*4, 106*4, 234*4, 26*4, 154*4, 90*4, 218*4, 58*4, 186*4, 
 253      2801 2803 
 253      A800 A802 
 253      A801 A803 
 253      6800 6802 
 254 04c0 1800 1802 		.dc.w	6*4, 134*4, 70*4, 198*4, 38*4, 166*4, 102*4, 230*4, 22*4, 150*4, 86*4, 214*4, 54*4, 182*4, 1
 254      1801 1803 
 254      9800 9802 
 254      9801 9803 
 254      5800 5802 
 255 04e0 3800 3802 		.dc.w	14*4, 142*4, 78*4, 206*4, 46*4, 174*4, 110*4, 238*4, 30*4, 158*4, 94*4, 222*4, 62*4, 190*4, 
 255      3801 3803 
 255      B800 B802 
 255      B801 B803 
 255      7800 7802 
 256               	
 257               	#elif FFT_N == 128
 258               	#ifdef INPUT_IQ
 259               		.dc.w	1*4, 65*4, 33*4, 97*4, 17*4, 81*4, 49*4, 113*4, 9*4, 73*4, 41*4, 105*4, 25*4, 89*4, 57*4, 12
 260               		.dc.w	5*4, 69*4, 37*4, 101*4, 21*4, 85*4, 53*4, 117*4, 13*4, 77*4, 45*4, 109*4, 29*4, 93*4, 61*4, 
 261               		.dc.w	3*4, 67*4, 35*4, 99*4, 19*4, 83*4, 51*4, 115*4, 11*4, 75*4, 43*4, 107*4, 27*4, 91*4, 59*4, 1
 262               		.dc.w	7*4, 71*4, 39*4, 103*4, 23*4, 87*4, 55*4, 119*4, 15*4, 79*4, 47*4, 111*4, 31*4, 95*4, 63*4, 
 263               	#endif
 264               		.dc.w	0*4, 64*4, 32*4, 96*4, 16*4, 80*4, 48*4, 112*4, 8*4, 72*4, 40*4, 104*4, 24*4, 88*4, 56*4, 12
 265               		.dc.w	4*4, 68*4, 36*4, 100*4, 20*4, 84*4, 52*4, 116*4, 12*4, 76*4, 44*4, 108*4, 28*4, 92*4, 60*4, 
 266               		.dc.w	2*4, 66*4, 34*4, 98*4, 18*4, 82*4, 50*4, 114*4, 10*4, 74*4, 42*4, 106*4, 26*4, 90*4, 58*4, 1
 267               		.dc.w	6*4, 70*4, 38*4, 102*4, 22*4, 86*4, 54*4, 118*4, 14*4, 78*4, 46*4, 110*4, 30*4, 94*4, 62*4, 
 268               	
 269               	#elif FFT_N == 64
 270               	#ifdef INPUT_IQ
 271               		.dc.w	1*4, 33*4, 17*4, 49*4, 9*4, 41*4, 25*4, 57*4, 5*4, 37*4, 21*4, 53*4, 13*4, 45*4, 29*4, 61*4
 272               		.dc.w	3*4, 35*4, 19*4, 51*4, 11*4, 43*4, 27*4, 59*4, 7*4, 39*4, 23*4, 55*4, 15*4, 47*4, 31*4, 63*4
 273               	#endif
 274               		.dc.w	0*4, 32*4, 16*4, 48*4, 8*4, 40*4, 24*4, 56*4, 4*4, 36*4, 20*4, 52*4, 12*4, 44*4, 28*4, 60*4
 275               		.dc.w	2*4, 34*4, 18*4, 50*4, 10*4, 42*4, 26*4, 58*4, 6*4, 38*4, 22*4, 54*4, 14*4, 46*4, 30*4, 62*4
 276               	#endif
 277               	
 278               	
 279               	
 280               	;----------------------------------------------------------------------------;
 281               	#ifndef INPUT_NOUSE
 282               	.global fft_input
 283               	.func fft_input
 284               	fft_input:
 285:ffft.S        **** 	pushw	T2H,T2L
 286:ffft.S        **** 	pushw	AH,AL
 287:ffft.S        **** 	pushw	YH,YL
 288               	
 289:ffft.S        **** 	movw	XL, EL				;X = array_src;
 290:ffft.S        **** 	movw	YL, DL				;Y = array_bfly;
 291:ffft.S        **** 	clr	EH				;Zero
 292:ffft.S        **** 	ldiw	ZH,ZL, tbl_window		;Z = &tbl_window[0];
 293:ffft.S        **** 	ldiw	AH,AL, FFT_N			;A = FFT_N;
 294:ffft.S        **** 1:	lpmw	BH,BL, Z+			;B = *Z++; (window)
 295:ffft.S        **** 	ldw	CH,CL, X+			;C = *X++; (I-axis)
 296:ffft.S        **** 	FMULS16	DH,DL,T2H,T2L, BH,BL, CH,CL	;D = B * C;
 297:ffft.S        **** 	stw	Y+, DH,DL			;*Y++ = D;
 298               	#ifdef INPUT_IQ
 299               		ldw	CH,CL, X+			;C = *X++; (Q-axis)
 300               		FMULS16	DH,DL,T2H,T2L, BH,BL, CH,CL	;D = B * C;
 301               	#endif
 302:ffft.S        **** 	stw	Y+, DH,DL			;*Y++ = D;
 303:ffft.S        **** 	subiw	AH,AL, 1			;while(--A)
 304:ffft.S        **** 	brne	1b				;/
 305               	
 306:ffft.S        **** 	popw	YH,YL
 307:ffft.S        **** 	popw	AH,AL
 308:ffft.S        **** 	popw	T2H,T2L
 309:ffft.S        **** 	clr	r1
 310:ffft.S        **** 	ret
 311               	.endfunc
 312               	#endif	/* INPUT_NOUSE */
 313               	
 314               	
 315               	
 316               	;----------------------------------------------------------------------------;
 317               	.global fft_execute
 318               	.func fft_execute
 319               	fft_execute:
 320:ffft.S        **** 	pushw	T2H,T2L
 321:ffft.S        **** 	pushw	T4H,T4L
 322:ffft.S        **** 	pushw	T6H,T6L
 323:ffft.S        **** 	pushw	T8H,T8L
 324:ffft.S        **** 	pushw	T10H,T10L
 325:ffft.S        **** 	pushw	T12H,T12L
 326:ffft.S        **** 	pushw	T14H,T14L
 327:ffft.S        **** 	pushw	AH,AL
 328:ffft.S        **** 	pushw	YH,YL
 329               	
 330:ffft.S        **** 	movw	ZL, EL				;Z = array_bfly;
 331:ffft.S        **** 	ldiw	EH,EL, 1			;E = 1;
 332:ffft.S        **** 	ldiw	XH,XL, FFT_N/2			;X = FFT_N/2;
 333:ffft.S        **** 1:	ldi	AL, 4				;T12 = E; (angular speed)
 334:ffft.S        **** 	mul	EL, AL				;
 335:ffft.S        **** 	movw	T12L, T0L			;
 336:ffft.S        **** 	mul	EH, AL				;
 337:ffft.S        **** 	add	T12H, T0L			;/
 338:ffft.S        **** 	movw	T14L, EL			;T14 = E;
 339:ffft.S        **** 	pushw	EH,EL
 340:ffft.S        **** 	movw	YL, ZL				;Z = &array_bfly[0];
 341:ffft.S        **** 	mul	XL, AL				;Y = &array_bfly[X];
 342:ffft.S        **** 	addw	YH,YL, T0H,T0L			;
 343:ffft.S        **** 	mul	XH, AL				;
 344:ffft.S        **** 	add	YH, T0L				;/
 345:ffft.S        **** 	pushw	ZH,ZL
 346:ffft.S        **** 2:	clrw	T10H,T10L			;T10 = 0 (angle)
 347:ffft.S        **** 	clr	EH				;Zero reg.
 348:ffft.S        **** 3:	lddw	AH,AL, Z+0			;A = *Z - *Y; *Z++ += *Y;
 349:ffft.S        **** 	asrw	AH,AL				;
 350:ffft.S        **** 	lddw	DH,DL, Y+0			;
 351:ffft.S        **** 	asrw	DH,DL				;
 352:ffft.S        **** 	movw	CL, AL				;
 353:ffft.S        **** 	subw	AH,AL, DH,DL			;
 354:ffft.S        **** 	addw	CH,CL, DH,DL			;
 355:ffft.S        **** 	stw	Z+, CH,CL			;/
 356:ffft.S        **** 	lddw	BH,BL, Z+0			;B = *Z - *Y; *Z++ += *Y;
 357:ffft.S        **** 	asrw	BH,BL				;
 358:ffft.S        **** 	lddw	DH,DL, Y+2			;
 359:ffft.S        **** 	asrw	DH,DL				;
 360:ffft.S        **** 	movw	CL, BL				;
 361:ffft.S        **** 	subw	BH,BL, DH,DL			;
 362:ffft.S        **** 	addw	CH,CL, DH,DL			;
 363:ffft.S        **** 	stw	Z+, CH,CL			;/
 364:ffft.S        **** 	movw	T0L, ZL
 365:ffft.S        **** 	ldiw	ZH,ZL, tbl_cos_sin		;C = cos(T10); D = sin(T10);
 366:ffft.S        **** 	addw	ZH,ZL, T10H,T10L		;
 367:ffft.S        **** 	lpmw	CH,CL, Z+			;
 368:ffft.S        **** 	lpmw	DH,DL, Z+			;/
 369:ffft.S        **** 	movw	ZL, T0L
 370:ffft.S        **** 	FMULS16	T4H,T4L,T2H,T2L, AH,AL, CH,CL	;*Y++ = A * C + B * D;
 371:ffft.S        **** 	FMULS16	T8H,T8L,T6H,T6L, BH,BL, DH,DL	;
 372:ffft.S        **** 	addd	T4H,T4L,T2H,T2L, T8H,T8L,T6H,T6L;
 373:ffft.S        **** 	stw	Y+, T4H,T4L			;/
 374:ffft.S        **** 	FMULS16	T4H,T4L,T2H,T2L, BH,BL, CH,CL 	;*Y++ = B * C - A * D;
 375:ffft.S        **** 	FMULS16	T8H,T8L,T6H,T6L, AH,AL, DH,DL 	;
 376:ffft.S        **** 	subd	T4H,T4L,T2H,T2L, T8H,T8L,T6H,T6L;
 377:ffft.S        **** 	stw	Y+, T4H,T4L			;/
 378:ffft.S        **** 	addw	T10H,T10L, T12H,T12L		;T10 += T12; (next angle)
 379               	#if FFT_N >= 128
 380:ffft.S        **** 	sbrs	T10H, FFT_B - 7			;while(T10 < pi)
 381               	#else
 382               		sbrs	T10L, FFT_B + 1
 383               	#endif
 384:ffft.S        **** 	rjmp	3b				;/
 385:ffft.S        **** 	ldi	AL, 4				;Y += X; Z += X; (skip split segment)
 386:ffft.S        **** 	mul	XL, AL
 387:ffft.S        **** 	addw	YH,YL, T0H,T0L			;
 388:ffft.S        **** 	addw	ZH,ZL, T0H,T0L			;
 389:ffft.S        **** 	mul	XH, AL				;
 390:ffft.S        **** 	add	YH, T0L				;
 391:ffft.S        **** 	add	ZH, T0L				;/
 392:ffft.S        **** 	ldi	EL, 1				;while(--T14)
 393:ffft.S        **** 	subw	T14H,T14L, EH,EL		;
 394:ffft.S        **** 	rjne	2b				;/
 395:ffft.S        **** 	popw	ZH,ZL
 396:ffft.S        **** 	popw	EH,EL
 397:ffft.S        **** 	lslw	EH,EL				;E *= 2;
 398:ffft.S        **** 	lsrw	XH,XL				;while(X /= 2)
 399:ffft.S        **** 	adiw	XL, 0				;
 400:ffft.S        **** 	rjne	1b				;/
 401               	
 402:ffft.S        **** 	popw	YH,YL
 403:ffft.S        **** 	popw	AH,AL
 404:ffft.S        **** 	popw	T14H,T14L
 405:ffft.S        **** 	popw	T12H,T12L
 406:ffft.S        **** 	popw	T10H,T10L
 407:ffft.S        **** 	popw	T8H,T8L
 408:ffft.S        **** 	popw	T6H,T6L
 409:ffft.S        **** 	popw	T4H,T4L
 410:ffft.S        **** 	popw	T2H,T2L
 411               	;	clr	r1
 412:ffft.S        **** 	ret
 413               	.endfunc
 414               	
 415               	
 416               	
 417               	;----------------------------------------------------------------------------;
 418               	.global fft_output
 419               	.func fft_output
 420               	fft_output:
 421:ffft.S        **** 	pushw	T2H,T2L
 422:ffft.S        **** 	pushw	T4H,T4L
 423:ffft.S        **** 	pushw	T6H,T6L
 424:ffft.S        **** 	pushw	T8H,T8L
 425:ffft.S        **** 	pushw	T10H,T10L
 426:ffft.S        **** 	pushw	AH,AL
 427:ffft.S        **** 	pushw	YH,YL
 428               	
 429:ffft.S        **** 	movw	T10L, EL			;T10 = array_bfly;
 430:ffft.S        **** 	movw	YL, DL				;Y = array_output;
 431:ffft.S        **** 	ldiw	ZH,ZL, tbl_bitrev		;Z = tbl_bitrev;
 432:ffft.S        **** 	clr	EH				;Zero
 433               	#ifdef INPUT_IQ
 434               		ldiw	AH,AL, FFT_N			;A = FFT_N; (pluse/minus)
 435               	#else
 436:ffft.S        **** 	ldiw	AH,AL, FFT_N / 2		;A = FFT_N / 2; (pluse only)
 437               	#endif
 438:ffft.S        **** 1:	lpmw	XH,XL, Z+			;X = *Z++;
 439:ffft.S        **** 	addw	XH,XL, T10H,T10L		;X += array_bfly;
 440:ffft.S        **** 	ldw	BH,BL, X+			;B = *X++;
 441:ffft.S        **** 	ldw	CH,CL, X+			;C = *X++;
 442:ffft.S        **** 	FMULS16	T4H,T4L,T2H,T2L, BH,BL, BH,BL	;T4:T2 = B * B;
 443:ffft.S        **** 	FMULS16	T8H,T8L,T6H,T6L, CH,CL, CH,CL	;T8:T6 = C * C;
 444:ffft.S        **** 	addd	T4H,T4L,T2H,T2L, T8H,T8L,T6H,T6L;T4:T2 += T8:T6;
 445:ffft.S        **** 	SQRT32					;B = sqrt(T4:T2);
 446:ffft.S        **** 	stw	Y+, BH,BL			;*Y++ = B;
 447:ffft.S        **** 	subiw	AH,AL, 1			;while(--A)
 448:ffft.S        **** 	rjne	1b				;/
 449               	
 450:ffft.S        **** 	popw	YH,YL
 451:ffft.S        **** 	popw	AH,AL
 452:ffft.S        **** 	popw	T10H,T10L
 453:ffft.S        **** 	popw	T8H,T8L
 454:ffft.S        **** 	popw	T6H,T6L
 455:ffft.S        **** 	popw	T4H,T4L
 456:ffft.S        **** 	popw	T2H,T2L
 457:ffft.S        **** 	clr	r1
 458:ffft.S        **** 	ret
 459               	.endfunc
 460               	
 461               	
 462               	
 463               	;----------------------------------------------------------------------------;
 464               	.global fmuls_f
 465               	.func fmuls_f
 466               	fmuls_f:
 467:ffft.S        **** 	movw	CL, EL				;C = E;
 468:ffft.S        **** 	clr	EH	;Zero
 469:ffft.S        **** 	FMULS16	ZH,ZL,XH,XL, CH,CL, DH,DL	;Z:X = C * D;
 470:ffft.S        **** 	movw	EL, ZL
 471:ffft.S        **** 	clr	r1
 472:ffft.S        **** 	ret
 473               	.endfunc
DEFINED SYMBOLS
              ffft.S:57     .text:00000000 tbl_window
              ffft.S:128    .text:00000200 tbl_cos_sin
              ffft.S:200    .text:00000400 tbl_bitrev
              ffft.S:284    .text:00000500 fft_input
              ffft.S:319    .text:0000055e fft_execute
              ffft.S:420    .text:000006f2 fft_output
              ffft.S:466    .text:00000800 fmuls_f

NO UNDEFINED SYMBOLS
